//created on: 06/05/2019
package resources.rules.boards.arduino_climatizaion_boards

//////////////////////////////////////////////////////////////////////////////////////////////////
//
//	BASIC THIS DRL IS USED AS ETL TO TRANSFORM SintechsSampling INTO CLIMATIZATION_EVENTS
//	MORE REFINED CLIMATIZATION BUSINESS RULES ARE MADE ON actuation.drl OF THIS OWN PACKAGE
//	
//////////////////////////////////////////////////////////////////////////////////////////////////


//list any import classes here.
import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.List;
import br.com.sintechs.stufa.drools.DroolsActionHandler;
import br.com.sintechs.stufa.drools.EventHandler;
import br.com.sintechs.stufa.models.SintechsSampling;
import br.com.sintechs.stufa.models.SintechsSamplingSensor;
import br.com.sintechs.stufa.models.SintechsSamplingActuator;
import br.com.sintechs.stufa.models.SintechsSensor;
import br.com.sintechs.stufa.models.RuleEvent;
import br.com.sintechs.stufa.models.ClimatizationEvent;
import br.com.sintechs.stufa.models.ClimatizationEventHandler;
import br.com.sintechs.stufa.models.ClimatizationEventStack;

//declare any global variables here
global br.com.sintechs.stufa.drools.DroolsActionHandler drlActionHandler;

declare SintechsSampling 
    @role( event )
end

declare SintechsSamplingSensor 
 	sampling_uuid : Timestamp
 	sensor : SintechsSensor 
	measure_type: String 
	value: Float
	rule_condition : Float
	created_at : Timestamp 
	updated_at : Timestamp 
end


// THIS IS RULE ZERO FROM THIS DRL, IT ITTENDS TO WAIT FOR ALL CLIMATIZATION BOARDS AND SENSORS IS EVALUATED
// SO IT CAN CREATES CLIMATIZATION_EVENTS AND DISPATCH TO actuation.drl RULES
rule "0000-arduino_climatization_boards"
dialect "mvel"
// LOOP YES
    when
    	$climatizationEventStack : ClimatizationEventStack (
    		ready == true
    	) from entry-point "StufaSamplingStream"
	then
	ClimatizationEventHandler cev = ClimatizationEventHandler.addStack($climatizationEventStack);
	// RESET THE STACK AND MODIFY ClimatizationEventHandler ON THE OTHER STREAM (StufaClimatizationStream) WITH 
	// STACK FULLY CREATED FOR THIS ROUND OF MODULES DATA
	$climatizationEventStack.reset();
	modify($climatizationEventStack);
	drlActionHandler.getDrools_session().getEntryPoint("StufaClimatizationStream").modify(cev);
end

rule "0001-arduino_climatization_board#1"
dialect "mvel"
no-loop true
    when
		$eventHandler : EventHandler()
		$climatizationEventStack : ClimatizationEventStack()  from entry-point "StufaSamplingStream"
		
		$sampling_list : List() from  entry-point "StufaSampingStream"
		
		$sampling : SintechsSampling( $sensors_sampling : samplingSensors, $actuators_sampling : samplingActuators, $globalProperties : globalProperties) 
			from $sampling_list
		
        $sampling_sensor : SintechsSamplingSensor(
    		(sensor.module.name == "arduino_climatization_board#1") 
    		&& (
	        	(measure_type == "heat_index" && value > rule_condition) ||
	        	(measure_type == "temperature" && value > rule_condition) ||
	        	(measure_type == "humidity" && value < rule_condition)
	        ) 
        ) from $sensors_sampling
    then
    	//1 - createEvent for this module with
    	RuleEvent ev = new RuleEvent(drools.getRule().getName(),  $sampling, $sampling_sensor,
			"[arduino_climatization_board#1]: "+$sampling_sensor.measure_type+" ativou condição empregada ("+$sampling_sensor.getValue()+
			","+$sampling_sensor.getRule_condition()+")",
			"DN20_1", true, $sampling_sensor.sensor.getUuid(), "DN20#1");
    	
		//2 - Add event for this module on EventHandler
		$eventHandler.addRuleEvent($sampling, ev);
		
		//3 - Modify ClimatizationEvent for further processing
		ClimatizationEvent ce = new ClimatizationEvent($sampling.getModule(), $sampling, 
			$sampling_sensor.sensor.getUuid(), $sampling_sensor.getMeasure_type(),  $sampling_sensor.getValue(),$sampling_sensor.getRule_condition());
			
		$climatizationEventStack.addEvent(ce);
		modify($climatizationEventStack);
end

rule "0001-NOT-arduino_climatization_board#1"
dialect "mvel"
no-loop true
    when
		$eventHandler : EventHandler()
		$climatizationEventStack : ClimatizationEventStack()  from  entry-point "StufaSamplingStream"
		$sampling_list: List() from  entry-point "StufaSampingStream"
		$sampling : SintechsSampling( $sensors_sampling : samplingSensors, $actuators_sampling : samplingActuators, $globalProperties : globalProperties) 
			from  $sampling_list
		
        $sampling_sensor : SintechsSamplingSensor(
    		(sensor.module.name == "arduino_climatization_board#1") 
    		&& (
	        	(measure_type == "heat_index" && value <= rule_condition) ||
	        	(measure_type == "temperature" && value <= rule_condition) ||
	        	(measure_type == "humidity" && value >= rule_condition)
	        ) 
        ) from $sensors_sampling
    then
    	//1 - createEvent for this module with
    	RuleEvent ev = new RuleEvent(drools.getRule().getName(),  $sampling, $sampling_sensor,
			"[arduino_climatization_board#1]: "+$sampling_sensor.measure_type+" ativou condição empregada ("+$sampling_sensor.getValue()+
			","+$sampling_sensor.getRule_condition()+")",
			"DN20_1", true, $sampling_sensor.sensor.getUuid(), "DN20#1");
    	
		//2 - Add event for this module on EventHandler
		$eventHandler.addRuleEvent($sampling, ev);
		
		//3 - Modify ClimatizationEvent for further processing
		ClimatizationEvent ce = new ClimatizationEvent($sampling.getModule(), $sampling, $sampling_sensor.sensor.getUuid(), $sampling_sensor.getMeasure_type(),  $sampling_sensor.getValue(),$sampling_sensor.getRule_condition());
		$climatizationEventStack.addEvent(ce);
		modify($climatizationEventStack);
end


rule "0002-arduino_climatization_board#2"
dialect "mvel"
no-loop true
    when
		$eventHandler : EventHandler()
		$climatizationEventStack : ClimatizationEventStack()  from  entry-point "StufaSamplingStream"
		$sampling_list : List() from  entry-point "StufaSampingStream"
		
		$sampling : SintechsSampling( $sensors_sampling : samplingSensors, $actuators_sampling : samplingActuators, $globalProperties : globalProperties) 
			from $sampling_list
		
        $sampling_sensor : SintechsSamplingSensor(
    		(sensor.module.name == "arduino_climatization_board#2") 
    		&& (
	        	(measure_type == "heat_index" && value > rule_condition) ||
	        	(measure_type == "temperature" && value > rule_condition) ||
	        	(measure_type == "humidity" && value < rule_condition)
	        ) 
        ) from $sensors_sampling
    then
    	//1 - createEvent for this module with
    	RuleEvent ev = new RuleEvent(drools.getRule().getName(),  $sampling, $sampling_sensor,
			"[arduino_climatization_board#2]: "+$sampling_sensor.measure_type+" ativou condição empregada ("+$sampling_sensor.getValue()+
			","+$sampling_sensor.getRule_condition()+")",
			"DN20_2", true, $sampling_sensor.sensor.getUuid(), "DN20#2");
    	
		//2 - Add event for this module on EventHandler
		$eventHandler.addRuleEvent($sampling, ev);
		
		//3 - Modify ClimatizationEvent for further processing
		ClimatizationEvent ce = new ClimatizationEvent($sampling.getModule(), $sampling, $sampling_sensor.sensor.getUuid(), $sampling_sensor.getMeasure_type(),  $sampling_sensor.getValue(),$sampling_sensor.getRule_condition());
		$climatizationEventStack.addEvent(ce);
		modify($climatizationEventStack);
end

rule "0002-NOT-arduino_climatization_board#1"
dialect "mvel"
no-loop true
    when
		$eventHandler : EventHandler()
		$climatizationEventStack : ClimatizationEventStack()  from  entry-point "StufaSamplingStream"
		$sampling_list: List() from  entry-point "StufaSampingStream"
		$sampling : SintechsSampling( $sensors_sampling : samplingSensors, $actuators_sampling : samplingActuators, $globalProperties : globalProperties) 
			from  $sampling_list
		
        $sampling_sensor : SintechsSamplingSensor(
    		(sensor.module.name == "arduino_climatization_board#2") 
    		&& (
	        	(measure_type == "heat_index" && value <= rule_condition) ||
	        	(measure_type == "temperature" && value <= rule_condition) ||
	        	(measure_type == "humidity" && value >= rule_condition)
	        ) 
        ) from $sensors_sampling
    then
    	//1 - createEvent for this module with
    	RuleEvent ev = new RuleEvent(drools.getRule().getName(),  $sampling, $sampling_sensor,
			"[arduino_climatization_board#2]: "+$sampling_sensor.measure_type+" ativou condição empregada ("+$sampling_sensor.getValue()+
			","+$sampling_sensor.getRule_condition()+")",
			"DN20_2", true, $sampling_sensor.sensor.getUuid(), "DN20#2");
    	
		//2 - Add event for this module on EventHandler
		$eventHandler.addRuleEvent($sampling, ev);
		
		//3 - Modify ClimatizationEvent for further processing
		ClimatizationEvent ce = new ClimatizationEvent($sampling.getModule(), $sampling, $sampling_sensor.sensor.getUuid(), $sampling_sensor.getMeasure_type(),  $sampling_sensor.getValue(),$sampling_sensor.getRule_condition());
		$climatizationEventStack.addEvent(ce);
		modify($climatizationEventStack);
end


rule "0003-arduino_climatization_board#3"
dialect "mvel"
no-loop true
    when
		$eventHandler : EventHandler()
		$climatizationEventStack : ClimatizationEventStack()  from  entry-point "StufaSamplingStream"		
		$sampling_list : List() from  entry-point "StufaSampingStream"
		
		$sampling : SintechsSampling( $sensors_sampling : samplingSensors, $actuators_sampling : samplingActuators, $globalProperties : globalProperties) 
			from $sampling_list
		
        $sampling_sensor : SintechsSamplingSensor(
    		(sensor.module.name == "arduino_climatization_board#3") 
    		&& (
	        	(measure_type == "heat_index" && value > rule_condition) ||
	        	(measure_type == "temperature" && value > rule_condition) ||
	        	(measure_type == "humidity" && value < rule_condition)
	        ) 
        ) from $sensors_sampling
    then
    	//1 - createEvent for this module with
    	RuleEvent ev = new RuleEvent(drools.getRule().getName(),  $sampling, $sampling_sensor,
			"[arduino_climatization_board#3]: "+$sampling_sensor.measure_type+" ativou condição empregada ("+$sampling_sensor.getValue()+
			","+$sampling_sensor.getRule_condition()+")",
			"DN20_3", true, $sampling_sensor.sensor.getUuid(), "DN20#3");
    	
		//2 - Add event for this module on EventHandler
		$eventHandler.addRuleEvent($sampling, ev);
		
		//3 - Modify ClimatizationEvent for further processing
		ClimatizationEvent ce = new ClimatizationEvent($sampling.getModule(), $sampling, $sampling_sensor.sensor.getUuid(), $sampling_sensor.getMeasure_type(),  $sampling_sensor.getValue(),$sampling_sensor.getRule_condition());
		$climatizationEventStack.addEvent(ce);
		modify($climatizationEventStack);
end

rule "0003-NOT-arduino_climatization_board#1"
dialect "mvel"
no-loop true
    when
		$eventHandler : EventHandler()
		$climatizationEventStack : ClimatizationEventStack()  from  entry-point "StufaSamplingStream"
		$sampling_list: List() from  entry-point "StufaSampingStream"
		$sampling : SintechsSampling( $sensors_sampling : samplingSensors, $actuators_sampling : samplingActuators, $globalProperties : globalProperties) 
			from  $sampling_list
		
        $sampling_sensor : SintechsSamplingSensor(
    		(sensor.module.name == "arduino_climatization_board#3") 
    		&& (
	        	(measure_type == "heat_index" && value <= rule_condition) ||
	        	(measure_type == "temperature" && value <= rule_condition) ||
	        	(measure_type == "humidity" && value >= rule_condition)
	        ) 
        ) from $sensors_sampling
    then
    	//1 - createEvent for this module with
    	RuleEvent ev = new RuleEvent(drools.getRule().getName(),  $sampling, $sampling_sensor,
			"[arduino_climatization_board#3]: "+$sampling_sensor.measure_type+" ativou condição empregada ("+$sampling_sensor.getValue()+
			","+$sampling_sensor.getRule_condition()+")",
			"DN20_3", true, $sampling_sensor.sensor.getUuid(), "DN20#3");
    	
		//2 - Add event for this module on EventHandler
		$eventHandler.addRuleEvent($sampling, ev);
		
		//3 - Modify ClimatizationEvent for further processing
		ClimatizationEvent ce = new ClimatizationEvent($sampling.getModule(), $sampling, $sampling_sensor.sensor.getUuid(), $sampling_sensor.getMeasure_type(),  $sampling_sensor.getValue(),$sampling_sensor.getRule_condition());
		$climatizationEventStack.addEvent(ce);
		modify($climatizationEventStack);
end














